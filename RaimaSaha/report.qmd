# Title

## By Raima Saha

# Abstract

# Background, Research Question, and Hypotheses

# Results

```{r}
#! echo: false, #! message: false
# Install necessary packages if not already installed
if (!require("dplyr")) install.packages("dplyr")
# if (!require("janitor")) install.packages("janitor")
# if (!require("ggplot2")) install.packages("ggplot2")
# if (!require("tidyr")) install.packages("tidyr")
# if (!require("sf")) install.packages("sf") 
# if (!require("mapview")) install.packages("mapview")
# if (!require("maps")) install.packages("maps")
# if (!require("OpenStreetMap")) install.packages("OpenStreetMap")
if (!require("caret")) install.packages("caret")
if (!require("e1071")) install.packages("e1071")
if (!require("plotly")) install.packages("plotly")
if (!require("gridExtra")) install.packages("gridExtra")
if (!require("readr")) install.packages("readr")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("corrplot")) install.packages("corrplot")
# if (!require("stats")) install.packages("stats")

# Load necessary libraries
library(dplyr)
# library(janitor)
# library(ggplot2)
# library(tidyr)
# library(sf)
# library(mapview)
# library(maps)
# library(OpenStreetMap)
library(caret)  # For cross-validation
library(e1071)  # For logistic regression
library(plotly)  # For 3D plots
library(gridExtra)
library(readr)
library(ggfortify)
library(corrplot)
# library(stats)

getwd()

filename <- "RaimaSaha/squirrel_data_clean.csv"

clean_data <- read.csv(filename)  

head(clean_data)
clean_data
```

Table 1 displays a covariance matrix yielded after conducting PCA on the variables latitude, longitude, primary_fur_color_num, shift_num, and location_num.

```{r}
# Standardize the data for running:foraging
temp_data <- clean_data |>
  select(latitude, longitude, primary_fur_color_num, shift_num, location_num) |>
  drop_na()
scaled_data <- scale(temp_data[, ])

# Perform PCA
pca <- prcomp(scaled_data, center = TRUE, scale. = TRUE)

# Get covariance matrix and eigenvalues
cov_matrix <- cov(scaled_data)
cov_matrix
```

Positive values indicate a positive relationship between certain principle components, while negative values indicate a negative relationship between certain principle components.

Figure 1 returns a correlogram between the principle components in the covariance matrix.

```{r}
corrplot(cov_matrix, method = "color")
```

Table 2 shows the total explained variance. It is said that

```{r}
# Explained Variance Ratio
total_explained_variances <- cumsum(explained_variance_ratio)

# print("Explained Variance Ratios:")
# print(explained_variance_ratio)

explained_variance_ratio_vector <- c()
components_vector <- c()

for (i in 1:length(explained_variance_ratio)) {
  # cat('Total explained variance including', i, 'components:', total_explained_variances[i], '\n')
  # cat('We', ifelse(total_explained_variances[i] < 0.9, 'should use more components', 'do not need to use more components.'), '\n')
  components_vector <- append(components_vector, i)
  explained_variance_ratio_vector <- append(explained_variance_ratio_vector, total_explained_variances[i])
}
df <- data.frame(number_of_components = components_vector, total_explained_variance = explained_variance_ratio_vector)
df
```

Figure 2 depicts the explained variance ratio and their corresponding values of how much variance they explain.

```{r}
variance_df <- data.frame(PC = 1:length(explained_variance_ratio), Variance = explained_variance_ratio, Cumulative = total_explained_variances)
variance_plot <- ggplot(variance_df, aes(x = PC)) +
  geom_bar(aes(y = Variance), stat = 'identity', alpha = 0.5, fill = 'blue') +
  geom_step(aes(y = Cumulative), color = 'red') +
  xlab('Principal Components') +
  ylab('Variance Explained') +
  ggtitle('Explained Variance Ratio and Cumulative Explained Variance') +
  theme_minimal()

print(variance_plot)
```

Figure 3 shows a Scree plot of all five principal components. It is consistent with the Explained Variance Ration in showing that 4 components is enough explain majority of the variance within the chosen variables.

```{r}
scree_plot <- ggplot(data.frame(PC = 1:length(eigenvalues), Eigenvalue = eigenvalues), aes(x = PC, y = Eigenvalue)) +
  geom_line() +
  geom_point() +
  xlab('Principal Component') +
  ylab('Eigenvalue') +
  ggtitle('Scree Plot') +
  theme_minimal()

print(scree_plot)
```

# Discussion

Acknowledgements

Sources

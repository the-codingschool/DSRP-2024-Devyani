# Principal Component Analysis

Question: What factors impact squirrel's behavior around humans (approaches, runs from, or indifferent)?

Loading in data

```{r}
# Install necessary packages if not already installed
if (!require("dplyr")) install.packages("dplyr")
if (!require("janitor")) install.packages("janitor")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("tidyr")) install.packages("tidyr")
if (!require("caret")) install.packages("caret")
if (!require("e1071")) install.packages("e1071")
if (!require("plotly")) install.packages("plotly")
if (!require("gridExtra")) install.packages("gridExtra")
if (!require("readr")) install.packages("readr")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("corrplot")) install.packages("corrplot")


# Load necessary libraries
library(dplyr)
library(janitor)
library(ggplot2)
library(tidyr)
library(caret)  # For cross-validation
library(e1071)  # For logistic regression
library(plotly)  # For 3D plots
library(gridExtra)
library(readr)
library(ggfortify)
library(corrplot)

getwd()

filename <- "RaimaSaha/squirrel_data_clean.csv"

clean_data <- read.csv(filename)  

head(clean_data)
clean_data
```

Conducting PCA

```{r}
# Standardize the data for running:foraging
temp_data <- clean_data |>
  select(latitude, longitude, primary_fur_color_num, shift_num, location_num, approaches, indifferent, runs_from) |>
  drop_na()
scaled_data <- scale(temp_data[, ])

# Perform PCA
pca <- prcomp(scaled_data, center = TRUE, scale. = TRUE)

# Get covariance matrix and eigenvalues
cov_matrix <- cov(scaled_data)
eigenvalues <- pca$sdev^2
explained_variance_ratio <- eigenvalues / sum(eigenvalues)

print("Covariance Matrix:")
print(cov_matrix)
print("\nEigenvalues:")
print(eigenvalues)

# corrMatrix = np.corrcoef(x,y) #input values for each of the variables
# # Plot the data:
# plt.imshow(corrMatrix)
# plt.xlabel(‘x’)
# plt.ylabel(‘y’)
# plt.colorbar()
# plt.show()
pca
```

Plotting the covariance matrix

```{r}
corrplot(cov_matrix, method = "color")
```

Explained variance ratio - keep components that explain 90-95% variance

```{r}
# Explained Variance Ratio
total_explained_variances <- cumsum(explained_variance_ratio)

print("Explained Variance Ratios:")
print(explained_variance_ratio)

for (i in 1:length(explained_variance_ratio)) {
  cat('Total explained variance including', i, 'components:', total_explained_variances[i], '\n')
  cat('We', ifelse(total_explained_variances[i] < 0.9, 'should use more components', 'do not need to use more components.'), '\n')
}
```

Creating a scree plot - stop including values where they start to plateau

```{r}
scree_plot <- ggplot(data.frame(PC = 1:length(eigenvalues), Eigenvalue = eigenvalues), aes(x = PC, y = Eigenvalue), xlim = c(0,5)) +
  geom_line() +
  geom_point() +
  xlab('Principal Component') +
  ylab('Eigenvalue') +
  ggtitle('Scree Plot') +
  theme_minimal()

print(scree_plot)
```

Creating a variance plot

```{r}
variance_df <- data.frame(PC = 1:length(explained_variance_ratio), Variance = explained_variance_ratio, Cumulative = total_explained_variances)
variance_plot <- ggplot(variance_df, aes(x = PC)) +
  geom_bar(aes(y = Variance), stat = 'identity', alpha = 0.5, fill = 'blue') +
  geom_step(aes(y = Cumulative), color = 'red') +
  xlab('Principal Components') +
  ylab('Variance Explained') +
  ggtitle('Explained Variance Ratio and Cumulative Explained Variance') +
  theme_minimal()

print(variance_plot)
```

Kaiser's Criterion – keep all eigenvalues greater that 1

```{r}
print("Explained Variances:")
print(eigenvalues)

for (i in 1:length(eigenvalues)) {
  ev <- eigenvalues[i]
  cat('Component', i, ' has explained variance of:', ev, '\n')
  cat('We will', ifelse(ev <= 1, 'not', ''), 'use this component.\n')
}
```

Visualizing the top two components

```{r}
# Visualize the top 2 components of the data
pc_1 <- pca$x[, 1]
pc_2 <- pca$x[, 2]

# x <- list(pc_1 = pc_1, pc_2 = pc_2)
# pca_data <- as.data.frame(x)
# pca_data
# ?qplot

autoplot(pca, scaled_data, color = "primary_fur_color_num") +
  xlab('Principal Component 1') +
  ylab('Principal Component 2') +
  ggtitle('PCA of Data') +
  theme_minimal()
```

Better understanding of the linear transformation of the features

```{r}
biplot(pca)
```

Plotting the PCA

```{r}
plot(pca, type = "bar")
plot(pca, type = "lines")
```

3D PCA plot

```{r}
pairs <- combn(ncol(pca$x), 2)

plots <- list()
for (i in 1:ncol(pairs)) {
  pc1 <- pairs[1, i]
  pc2 <- pairs[2, i]
  plots[[i]] <- ggplot(data.frame(PC1 = pca$x[, pc1], PC2 = pca$x[, pc2], Class = as.factor(data$Class)), aes(x = PC1, y = PC2, color = Class)) +
    geom_point() +
    xlab(paste('Principal Component', pc1)) +
    ylab(paste('Principal Component', pc2)) +
    ggtitle(paste('PC', pc1, 'vs PC', pc2, 'with Total Explained Variance Ratios:', explained_variance_ratio[pc1] + explained_variance_ratio[pc2])) +
    theme_minimal()
}

do.call(grid.arrange, c(plots, ncol=2))
```

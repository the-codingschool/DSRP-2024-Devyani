# Data Cleaning

Reading in the data

```{r}
# Install necessary packages if not already installed
if (!require("dplyr")) install.packages("dplyr")
if (!require("janitor")) install.packages("janitor")
# if (!require("ggplot2")) install.packages("ggplot2")
if (!require("tidyr")) install.packages("tidyr")
# if (!require("sf")) install.packages("sf")
# if (!require("mapview")) install.packages("mapview")
# if (!require("maps")) install.packages("maps")
# if (!require("OpenStreetMap")) install.packages("OpenStreetMap")
# if (!require("caret")) install.packages("caret")
# if (!require("e1071")) install.packages("e1071")
# if (!require("plotly")) install.packages("plotly")
# if (!require("gridExtra")) install.packages("gridExtra")
if (!require("readr")) install.packages("readr")



# Load necessary libraries
library(dplyr)
library(janitor)
# library(ggplot2)
library(tidyr)
# library(sf)
# library(mapview)
# library(maps)
# library(OpenStreetMap)
# library(caret)  # For cross-validation
# library(e1071)  # For logistic regression
# library(plotly)  # For 3D plots
# library(gridExtra)
library(readr)

getwd()

filename <- "data/2018_Central_Park_Squirrel_Census_-_Squirrel_Data_20240721.csv"

data <- read.csv(filename)  

head(data)
data
```

Some exploratory data analysis

```{r}
str(data)
```

At a glance: data inconsistencies

-   FIX COLUMN NAMES
    -   get rid of periods
    -   latitude and longitudes are together in character form
        -   separate into "latitude" and "longitude" columns
-   lots of Booleans are represented as characters instead of Boolean
-   fur color is either empty or inconsistent
    -   i.e. "Gray" and "Gray+"
-   dates are weird
-   many columns are character datatypes when they should be numeric or Booleans
-   \*Something to consider
    -   should I change latitude and longitude columns to numeric types?
    -   above_ground_sighter: combination of numbers and booleans – how should I handle them

Cleaning column names to snake case

```{r}
data_col_cleaned <- clean_names(data, case = "snake")
data_col_cleaned
```

Removing column combination_of_primary_and_highlight_color

```{r}
no_combo_col_data_cleaned <- select(data_col_cleaned, !combination_of_primary_and_highlight_color)
no_combo_col_data_cleaned
```

Fixing lat_long column by separating into a latitude and longitude column. Technically, x and y also are the latitude and longitude column, and it makes sense to just only have one copy of this specific data. I'm opting to keep the lat_long and separate it because it has more decimal points and is more precise than the x and y columns.

```{r}
# removing parenthesis from lat_long
no_combo_col_data_cleaned$lat_long <- gsub("[()]","", as.character(no_combo_col_data_cleaned$lat_long))
no_combo_col_data_cleaned

# separating lat_long into three columns: POINT, latitude, and longitude
sep_lat_long_cleaned <- separate(no_combo_col_data_cleaned, col = lat_long, into = c("POINT", "latitude", "longitude"), sep = " ")
sep_lat_long_cleaned

# removing x, y, and POINT columns
no_point_data_cleaned <- select(sep_lat_long_cleaned, !c("x", "y", "POINT"))
no_point_data_cleaned

# arranging data to put latitude and longitude first
arranged_data <- select(no_point_data_cleaned, latitude, longitude, everything())
arranged_data

dim(arranged_data)
```

Removing empty rows (didn't work so no_empty_data = arranged_data). Will be using arranged_data for next section to avoid any confusion.

```{r}
no_empty_data <- remove_empty(arranged_data, which = c("rows", "cols"))
no_empty_data
dim(no_empty_data) # dimensions don't change since no row or column is fully empty

no_empty_data <- na.omit(arranged_data)
no_empty_data
dim(no_empty_data) # dimensions don't change since no row or column is fully empty
```

Inserting NA for empty and "?" values

```{r}
arranged_data[arranged_data == "" | arranged_data == " " | arranged_data == "?"] <- NA
arranged_data
```

Removing NA values part 2 –\> ABORT, ONLY ONE ROW LEFT

```{r}
no_empty_data <- na.omit(arranged_data)
no_empty_data
dim(no_empty_data)
```

Finding duplicates and removing them.

```{r}
duplicates <- arranged_data |>
  get_dupes()
duplicates # no duplicates found
```

Convert latitude and longitude to numeric types.

```{r}
lat_long_num_data <- transform(arranged_data, latitude = as.numeric(latitude), longitude = as.numeric(longitude))
lat_long_num_data
```

Removing FALSE in above_ground_sighter_measurements and replacing with 0.

```{r}
lat_long_num_data[lat_long_num_data == "FALSE"] <- "0"
lat_long_num_data
```

Converting **above_ground_sighter_measurement** column from character to numeric.

```{r}
agsm_num <- transform(lat_long_num_data, above_ground_sighter_measurement = as.numeric(above_ground_sighter_measurement))
agsm_num
```

Converting data column from int object to date object.

```{r}
date_data <- transform(lat_long_num_data, date = as.Date(as.character(date), format = "%m%d%Y"))
date_data
```

Converting running:foraging and kuks:runs_from to logical vectors (Boolean).

```{r}
# bool_data_cleaned <- date_data |>
#   select(kuks:runs_from) |>
#   as.logical()
# bool_data_cleaned

# date_data[date_data == "true"] <- as.logical("T")
# date_data[date_data == "false"] <- as.logical("F")
# date_data

# date_data[, c("running", "chasing", "climbing", "eating", "foraging")] <- as.logical(date_data[, c("running", "chasing", "climbing", "eating", "foraging")])
# date_data

# for (i in c("running", "chasing", "climbing", "eating", "foraging")) {
#   date_data$i <- as.logical(date_data$i)
# }
# date_data

date_data$running <- as.logical(date_data$running)
date_data$chasing <- as.logical(date_data$chasing)
date_data$climbing <- as.logical(date_data$climbing)
date_data$eating <- as.logical(date_data$eating)
date_data$foraging <- as.logical(date_data$foraging)

date_data$kuks <- as.logical(date_data$kuks)
date_data$quaas <- as.logical(date_data$quaas)
date_data$moans <- as.logical(date_data$moans)
date_data$tail_flags <- as.logical(date_data$tail_flags)
date_data$tail_twitches <- as.logical(date_data$tail_twitches)
date_data$approaches <- as.logical(date_data$approaches)
date_data$indifferent <- as.logical(date_data$indifferent)
date_data$runs_from <- as.logical(date_data$runs_from)

date_data
```

Getting rid of random i column at the end of dataset.

```{r}
nec_data <- select(date_data, !i)
nec_data
```

Putting result of final step of cleaning process (for now) in the variable clean_data.

```{r}
clean_data <- date_data
clean_data
```

Creating a clean dataset with boolean columns as binary, 0 = False and 1 = True.

```{r}
clean_data[clean_data == FALSE] <- 0
clean_data[clean_data == TRUE] <- 1

clean_data
```

Changing primary_fur_color to numeric so I can conduct PCA on it. 1 = Gray, 2 = Cinnamon, 3 = Black.

```{r}
clean_data$primary_fur_color[clean_data$primary_fur_color == "Gray"] <- 1
clean_data$primary_fur_color[clean_data$primary_fur_color == "Cinnamon"] <- 2
clean_data$primary_fur_color[clean_data$primary_fur_color == "Black"] <- 3

clean_data <- rename(clean_data, primary_fur_color_num = primary_fur_color)

clean_data$primary_fur_color <- clean_data$primary_fur_color_num
clean_data$primary_fur_color[clean_data$primary_fur_color == 1] <- "Gray"
clean_data$primary_fur_color[clean_data$primary_fur_color == 2] <- "Cinnamon"
clean_data$primary_fur_color[clean_data$primary_fur_color == 3] <- "Black"

clean_data <- select(clean_data, latitude:age, primary_fur_color, primary_fur_color_num, everything())
clean_data
```

Creating a new column called human_interaction with 0 = N/A, 1 = approaches, 2 = indifferent, 3 = runs from.

```{r}
clean_data$human_interaction <- NA
clean_data$human_interaction[clean_data$approaches == 1] <- 1
clean_data$human_interaction[clean_data$indifferent == 1] <- 2
clean_data$human_interaction[clean_data$runs_from == 1] <- 3

clean_data
```

Saving clean data to new .csv file

```{r}
write_csv(clean_data, "RaimaSaha/squirrel_data_clean.csv")
```

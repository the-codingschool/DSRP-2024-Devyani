# Data Cleaning

Reading in the data

```{r}
# Install necessary packages if not already installed
if (!require("titanic")) install.packages("titanic")
if (!require("dplyr")) install.packages("dplyr")
if (!require("janitor")) install.packages("janitor")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("tidyr")) install.packages("tidyr")
if (!require("sf")) install.packages("sf")
if (!require("mapview")) install.packages("mapview")
if (!require("maps")) install.packages("maps")
if (!require("OpenStreetMap")) install.packages("OpenStreetMap")

# Load necessary libraries
library(titanic)
library(dplyr)
library(janitor)
library(ggplot2)
library(tidyr)
library(sf)
library(mapview)
library(maps)
library(OpenStreetMap)

# Load required libraries
install.packages("ggplot2")     # For plotting
getwd()

filename <- "data/2018_Central_Park_Squirrel_Census_-_Squirrel_Data_20240721.csv"

data <- read.csv(filename)  

head(data)
data
```

Some exploratory data analysis

```{r}
str(data)
```

At a glance: data inconsistencies

-   FIX COLUMN NAMES
    -   get rid of periods
    -   latitude and longitudes are together in character form
        -   separate into "latitude" and "longitude" columns
-   lots of Booleans are represented as characters instead of Boolean
-   fur color is either empty or inconsistent
    -   i.e. "Gray" and "Gray+"
-   dates are weird
-   many columns are character datatypes when they should be numeric or Booleans
-   \*Something to consider
    -   should I change latitude and longitude columns to numeric types?
    -   above_ground_sighter: combination of numbers and booleans – how should I handle them

Cleaning column names to snake case

```{r}
data_col_cleaned <- clean_names(data, case = "snake")
data_col_cleaned
```

Removing column combination_of_primary_and_highlight_color

```{r}
no_combo_col_data_cleaned <- select(data_col_cleaned, !combination_of_primary_and_highlight_color)
no_combo_col_data_cleaned
```

Fixing lat_long column by separating into a latitude and longitude column. Technically, x and y also are the latitude and longitude column, and it makes sense to just only have one copy of this specific data. I'm opting to keep the lat_long and separate it because it has more decimal points and is more precise than the x and y columns.

```{r}
# removing parenthesis from lat_long
no_combo_col_data_cleaned$lat_long <- gsub("[()]","", as.character(no_combo_col_data_cleaned$lat_long))
no_combo_col_data_cleaned

# separating lat_long into three columns: POINT, latitude, and longitude
sep_lat_long_cleaned <- separate(no_combo_col_data_cleaned, col = lat_long, into = c("POINT", "latitude", "longitude"), sep = " ")
sep_lat_long_cleaned

# removing x, y, and POINT columns
no_point_data_cleaned <- select(sep_lat_long_cleaned, !c("x", "y", "POINT"))
no_point_data_cleaned

# arranging data to put latitude and longitude first
arranged_data <- select(no_point_data_cleaned, latitude, longitude, everything())
arranged_data

dim(arranged_data)
```

Removing empty rows (didn't work so no_empty_data = arranged_data). Will be using arranged_data for next section to avoid any confusion.

```{r}
no_empty_data <- remove_empty(arranged_data, which = c("rows", "cols"))
no_empty_data
dim(no_empty_data) # dimensions don't change since no row or column is fully empty

no_empty_data <- na.omit(arranged_data)
no_empty_data
dim(no_empty_data) # dimensions don't change since no row or column is fully empty
```

Inserting NA for empty and "?" values

```{r}
arranged_data[arranged_data == "" | arranged_data == " " | arranged_data == "?"] <- NA
arranged_data
```

Removing NA values part 2 –\> ABORT, ONLY ONE ROW LEFT

```{r}
no_empty_data <- na.omit(arranged_data)
no_empty_data
dim(no_empty_data)
```

Finding duplicates and removing them.

```{r}
duplicates <- arranged_data |>
  get_dupes()
duplicates # no duplicates found
```

Convert latitude and longitude to numeric types.

```{r}
lat_long_num_data <- transform(arranged_data, latitude = as.numeric(latitude), longitude = as.numeric(longitude))
lat_long_num_data
```

Removing FALSE in above_ground_sighter_measurements and replacing with 0.

```{r}
lat_long_num_data[lat_long_num_data == "FALSE"] <- "0"
lat_long_num_data
```

Converting **above_ground_sighter_measurement** column from character to numeric.

```{r}
agsm_num <- transform(lat_long_num_data, above_ground_sighter_measurement = as.numeric(above_ground_sighter_measurement))
agsm_num
```

Converting data column from int object to date object.

```{r}
date_data <- transform(lat_long_num_data, date = as.Date(as.character(date), format = "%m%d%Y"))
date_data
```

Converting running:foraging and kuks:runs_from to logical vectors (Boolean).

```{r}
# bool_data_cleaned <- date_data |>
#   select(kuks:runs_from) |>
#   as.logical()
# bool_data_cleaned

# date_data[date_data == "true"] <- as.logical("T")
# date_data[date_data == "false"] <- as.logical("F")
# date_data

# date_data[, c("running", "chasing", "climbing", "eating", "foraging")] <- as.logical(date_data[, c("running", "chasing", "climbing", "eating", "foraging")])
# date_data

# for (i in c("running", "chasing", "climbing", "eating", "foraging")) {
#   date_data$i <- as.logical(date_data$i)
# }
# date_data

date_data$running <- as.logical(date_data$running)
date_data$chasing <- as.logical(date_data$chasing)
date_data$climbing <- as.logical(date_data$climbing)
date_data$eating <- as.logical(date_data$eating)
date_data$foraging <- as.logical(date_data$foraging)

date_data$kuks <- as.logical(date_data$kuks)
date_data$quaas <- as.logical(date_data$quaas)
date_data$moans <- as.logical(date_data$moans)
date_data$tail_flags <- as.logical(date_data$tail_flags)
date_data$tail_twitches <- as.logical(date_data$tail_twitches)
date_data$approaches <- as.logical(date_data$approaches)
date_data$indifferent <- as.logical(date_data$indifferent)
date_data$runs_from <- as.logical(date_data$runs_from)

date_data
```

Getting rid of random i column at the end of dataset.

```{r}
nec_data <- select(date_data, !i)
nec_data
```

Putting result of final step of cleaning process (for now) in the variable clean_data.

```{r}
clean_data <- nec_data
clean_data
```

# Exploratory Data Analysis

## Early questions

-   does age have any impact on how a squirrel acts (kuks, qaas, indifferent, etc.)?
-   how does location influence the sounds or behavior of a squirrel?

Looking at the structure of the data

```{r}
str(clean_data)
```

Looking at the summary of the data

```{r}
summary(clean_data)
```

Comparing number of adult squirrels to juvenile squirrels

```{r}
age_column <- clean_data |>
  select(age) |>
  drop_na() # dropping NA values in the data set

age_column |>
  count(age) |>
  ggplot(aes(x = age, y = n, fill = age)) +
  geom_bar(stat = "identity") +
  labs(title = "Number of Adults versus Juveniles",
  x = "Age",
  y = "Count",
  fill = "Age")
```

I don't know what the pink (?) category. Take a look into the distribution of the data.

```{r}
table(clean_data$age) # distribution of adult and juvenile
sum(is.na(clean_data$age)) # number of NA values
```

Creating plot to see trend between sighting above or below ground and date.

```{r}
location_date_column <- clean_data |>
  select(location, date) |>
  drop_na() # dropping NA values in the data set

ggplot(location_date_column, aes(x = location, fill = factor(date))) + geom_bar(position = "dodge") 
```

We can see that squirrels are more likely to be found on the ground plane than above ground on any given day.

Let's look at the location of a squirrel based on its fur color.

```{r}
location_fur_column <- clean_data |>
  select(location, primary_fur_color) |>
  drop_na() # dropping NA values in the data set

ggplot(location_fur_column, aes(x = location, fill = primary_fur_color)) + geom_bar(position = "dodge") 
```

Not much can be discerned by the graph other than the trend discovered above, that squirrels tend to spotted more on the ground plane than above ground.

Let's create a plot to see if a certain colored squirrel is to be spotted more on any given day.

```{r}
fur_date_column <- clean_data |>
  select(primary_fur_color, date) |>
  drop_na() # dropping NA values in the data set

ggplot(fur_date_column, aes(x = primary_fur_color, fill = factor(date))) + geom_bar(position = "dodge") 
```

From this plot, we can see that squirrels with gray as their primary fur color are spotted more than squirrels with any other fur color. Maybe gray squirrels are the most common?

I'm creating a plot to see how high each squirrel was spotted above ground based on primary fur color. Knowing that majority of the squirrels in the data set have gray fur color and they were spotted above ground the most, I wouldn't be surprised if the highest measurements belonged to them.

```{r}
fur_agm_column <- clean_data |>
  select(primary_fur_color, above_ground_sighter_measurement) #|>
  #drop_na() # dropping NA values in the data set

ggplot(fur_agm_column, aes(x = primary_fur_color, y = above_ground_sighter_measurement)) + geom_bar(stat = "identity") 
```

My prediction was right.

**IGNORE, COME BACK TO THIS:** Let's look at the relationship between primary fur colors and latitudinal and longitudinal locations.

```{r}
# lat_long <- clean_data |>
#   select(latitude, longitude, primary_fur_color)
# 
# ggplot(data = lat_long, aes(map_id = city)) + geom_map(aes(fill = primary_fur_color, map = maps_data("city"))) 

  

upperLeft = c(40.75, -73.50)

lowerRight = c(40.71, -73.43)

base_map  = openmap(upperLeft, lowerRight, type="osm")

plot(base_map)

points <- st_as_sf(clean_data, coords = c("latitude", "longitude"), crs = 4326)

plot(st_geometry(points), pch = 16, col = "navy", cex = 2, add = T)

```

Creating plot mapping out latitudes and longitudes in mapview. Shows distribution of squirrels without any context.

```{r}
mapview(clean_data, xcol = "longitude", ycol = "latitude", crs = 4326, grid = FALSE)


```

Created a pie chart of number of squirrels found running and not running

```{r}
pie(table(clean_data$running), main = "Running?",  labels = c("False", "True"), sep = "")

table(clean_data$running)
```

Heat map between
